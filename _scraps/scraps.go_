
// from rest.go - rest controllers
func Login(c *gin.Context) {
	username := c.PostForm("username")
	password := c.PostForm("password")
	err := auth.Login(c, username, password)
	if err != nil {
		c.JSON(http.StatusOK, gin.H{"error": err.Error()}) // http.StatusUnauthorized
	} else {
		c.JSON(http.StatusOK, gin.H{"message": "Successfully authenticated " + username})
	}
}

func Logout(c *gin.Context) {
	username := session.GetUserName(c)
	auth.Logout(c)
	c.JSON(http.StatusOK, gin.H{"message": username + " successfully logged out"})
}

//main
router.ReadConfig("./configs/routes.yaml", env)


//router
	r.POST("/login", controller.Login)
	r.GET("/logout", controller.Logout)


// auth
// GetAppURL Возвращает url приложения.
func GetAppURL(appname string) (string, error) {
	rec, err := db.QueryRowMap(`SELECT url FROM app WHERE appname=$1;`, appname)
	if err != nil {
		return "", err
	}
	url, _ := rec["url"].(string)
	return url, nil
}



// почта


// SendAuthMail Authenticated SMTP
func SendAuthPassword(toMail, password string) error {
	// Set up authentication information.
	auth := smtp.PlainAuth(
		"",
		params.User,
		params.Password,
		params.Host,
	)

	msg := fmt.Sprintf(params.Body, params.From, toMail, password)

	// Connect to the server, authenticate, set the sender and recipient,
	// and send the email all in one step.
	err := smtp.SendMail(
		params.Addr,
		auth,
		params.From,
		[]string{toMail},
		[]byte(msg),
	)
	return err
}


func SendPasswordInsecure(toMail, password string) error {

	// Set up authentication information.
	auth := smtp.PlainAuth(
		"",
		params.User,
		params.Password,
		params.Host,
	)

	msg := fmt.Sprintf(params.Body, params.From, toMail, password)

	from := mail.Address{"", params.From}
	to := mail.Address{"", toMail}

	// TLS config
	tlsconfig := &tls.Config{
		InsecureSkipVerify: true,
		ServerName:         params.Host,
	}

	c, err := smtp.Dial(params.Addr)
	if err != nil {
		return err
	}

	c.StartTLS(tlsconfig)

	// Auth
	if err = c.Auth(auth); err != nil {
		return err
	}

	// To && From
	if err = c.Mail(from.Address); err != nil {
		return err
	}

	if err = c.Rcpt(to.Address); err != nil {
		return err
	}

	// Data
	w, err := c.Data()
	if err != nil {
		return err
	}

	_, err = w.Write([]byte(msg))
	if err != nil {
		return err
	}

	err = w.Close()
	if err != nil {
		return err
	}

	c.Quit()

	return nil

}


// proxies
// func getProxy(appname string) *httputil.ReverseProxy {
// 	proxy, ok := proxies[appname]
// 	if !ok {
// 		target, _ := auth.GetAppURL(appname)
// 		proxies[appname] = createProxy(target)
// 		proxy = proxies[appname]
// 	}
// 	return proxy
// }

// ReverseProxy перенаправляет запросы к другому серверу
// func ReverseProxy(target string, pathPrefix string) gin.HandlerFunc {
// 	url, err := url.Parse(target)
// 	if err != nil {
// 		log.Println("ERR", err)
// 	}
// 	proxy := httputil.NewSingleHostReverseProxy(url)
// 	return func(c *gin.Context) {
// 		// p := c.Request.URL.Path
// 		// pp := strings.TrimPrefix(p, pathPrefix)
// 		proxypath := c.Param("proxypath")
// 		// if pp == proxypath {
// 		// 	fmt.Println("equal:", proxypath)
// 		// }
// 		c.Request.URL.Path = proxypath
// 		proxy.ServeHTTP(c.Writer, c.Request)
// 	}
// }

// func PrimitiveReverseProxy(target string, pathPrefix string) gin.HandlerFunc {
// 	proxy := primitiveproxy.NewPrimitiveProxy(target)
// 	return func(c *gin.Context) {
// 		c.Request.URL.Path = strings.TrimPrefix(c.Request.URL.Path, pathPrefix)
// 		proxy.ServeHTTP(c.Writer, c.Request)
// 	}
// }

// func ReverseProxy2(scheme string, targ string, pathPrefix string) gin.HandlerFunc {
// 	target := targ
// 	return func(c *gin.Context) {
// 		director := func(req *http.Request) {
// 			r := c.Request
// 			// req = r
// 			req.URL.Scheme = scheme
// 			req.URL.Host = target
// 			req.URL.Path = strings.TrimPrefix(req.URL.Path, pathPrefix)
// 			// req.Header["my-header"] = []string{r.Header.Get("my-header")}
// 			// Golang camelcases headers
// 			// delete(req.Header, "My-Header")

// 			// println("-------------------------")
// 			// for name, value := range r.Header {
// 			// 	println(name, value[0])
// 			// }
// 			for name, value := range r.Header {
// 				req.Header.Set(name, value[0])
// 			}
// 		}
// 		proxy := &httputil.ReverseProxy{Director: director}
// 		proxy.ServeHTTP(c.Writer, c.Request)
// 	}
// }
